<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type='text/xsl' href='puzzles.xsl'?><puzzles>
<puzzle>
<ticket>1</ticket>
<file>pom.xml</file>
<prefix>                </prefix>
<body>Enable Cobertura profile by default. This code coverage check doesn't work due to some problem with Cobertura plugin. It always reports zero coverage for all classes. I was trying to run it without AspectJ weavling using "mvn clean install -Pcobertura -P\!aspectj", but it doesn't help. Let's fix it and enable by default.</body>
<estimate>0</estimate>
<lines>264-269</lines>
<owner>someone</owner>
</puzzle>
<puzzle>
<ticket>121</ticket>
<file>src/main/java/com/jcabi/github/Fork.java</file>
<prefix> * </prefix>
<body>Add more Fork attributes to Smart decorator for this class. Don't forget to add them to unit test.</body>
<estimate>0</estimate>
<lines>48-48</lines>
<owner>someone</owner>
</puzzle>
<puzzle>
<ticket>115</ticket>
<file>src/main/java/com/jcabi/github/Git.java</file>
<prefix>     * </prefix>
<body>Implement the Git Data Trees API. We need to implement the following: 1) Add the operations in http://developer.github.com/v3/git/trees/ to the Trees interface. 2) A class RtTrees, which performs RESTful request operations against the Trees API. 3) A class MkTrees, which mocks the Trees interface. 4) An interface Tag, which represents a single Tag of the Git Data API. 5) RtTrees, a Tag implementation which fetches and modifies Tag information according to the Trees API, and 6) MkTag, which mocks a single Tag object. Don't forget to implement unit tests and integration tests.</body>
<estimate>60</estimate>
<lines>100-112</lines>
<owner>someone</owner>
</puzzle>
<puzzle>
<ticket>591</ticket>
<file>src/main/java/com/jcabi/github/RtCollaborators.java</file>
<prefix> * </prefix>
<body>Implement add() method. It should be implemented as described at http://developer.github.com/v3/repos/collaborators/ Test as com.jcabi.github.RtCollaboratorsTest should be also implemented.</body>
<estimate>0</estimate>
<lines>46-49</lines>
<owner>someone</owner>
</puzzle>
<puzzle>
<ticket>124</ticket>
<file>src/main/java/com/jcabi/github/Search.java</file>
<prefix> * </prefix>
<body>The {@link Search} interface currently defines methods for searching repos, issues, and users. We need to add a new method codes() for the purposes for code searching. At the moment, we don't have a way to represent codes in the API.</body>
<estimate>0</estimate>
<lines>43-46</lines>
<owner>someone</owner>
</puzzle>
<puzzle>
<ticket>439</ticket>
<file>src/main/java/com/jcabi/github/mock/MkRepoCommits.java</file>
<prefix> * </prefix>
<body>MkRepoCommits should be able to compare two commits and return comparison in patch format. Let's create a test for this method and implement the method. When done, remove this puzzle. See http://developer.github.com/v3/repos/commits/#compare-two-commits</body>
<estimate>0</estimate>
<lines>51-55</lines>
<owner>someone</owner>
</puzzle>
<puzzle>
<ticket>224</ticket>
<file>src/test/java/com/jcabi/github/RtDeployKeysITCase.java</file>
<prefix>     * </prefix>
<body>RtDeployKeysITCase#canFetchAllDeployKeys() is ignored because at the moment, {@link RtDeployKeys#iterate()} is not fully implemented and only returns empty iterators. Once {@link RtDeployKeys#iterate()} has been implemented, remove the Ignore annotation here to enable the integration test. Revise this test method if necessary.</body>
<estimate>0</estimate>
<lines>52-56</lines>
<owner>someone</owner>
</puzzle>
<puzzle>
<ticket>551</ticket>
<file>src/test/java/com/jcabi/github/RtGistITCase.java</file>
<prefix>     * </prefix>
<body>ReadsAndWritesGists is disabled since it doesn't work with real Github account. Let's fix it and remove the Ignore annotation.</body>
<estimate>0</estimate>
<lines>48-50</lines>
<owner>someone</owner>
</puzzle>
<puzzle>
<ticket>551</ticket>
<file>src/test/java/com/jcabi/github/RtGistsITCase.java</file>
<prefix>     * </prefix>
<body>CreateGist is disabled since it doesn't work with real Github account. Let's fix it and remove the Ignore annotation.</body>
<estimate>0</estimate>
<lines>48-50</lines>
<owner>someone</owner>
</puzzle>
<puzzle>
<ticket>1</ticket>
<file>src/test/java/com/jcabi/github/RtPublicKeysITCase.java</file>
<prefix> * </prefix>
<body>RtPublicKeysITCase is disabled since it doesn't work with real Github account. The problem is that guthub can't remove keys properly, so we forced to generate valid key each new run Let's fix it and remove all Ignore annotations from all its methods.</body>
<estimate>0</estimate>
<lines>43-46</lines>
<owner>someone</owner>
</puzzle>
<puzzle>
<ticket>416</ticket>
<file>src/test/java/com/jcabi/github/RtPullCommentsTest.java</file>
<prefix>     * </prefix>
<body>RtPullComments should be able to fetch all pull comments of a repo. Implement {@link RtPullComments#reply(String, int))} and don't forget to include a test here. When done, remove this puzzle and the Ignore annotation of this test method.</body>
<estimate>0</estimate>
<lines>199-202</lines>
<owner>someone</owner>
</puzzle>
<puzzle>
<ticket>524</ticket>
<file>src/test/java/com/jcabi/github/mock/MkContentsTest.java</file>
<prefix> * </prefix>
<body>MkContents should be able to handle branches. In a request for file update or create you may specify a branch. Also, a branch might be specified in a reading request. So, if you changed some file in branch-1, you shouldn't get these changes in the master branch, only in branch-1. Implementation of create, update and get methods of MkContents should be changed. See http://developer.github.com/v3/repos/contents/#update-a-file for details</body>
<estimate>0</estimate>
<lines>54-62</lines>
<owner>someone</owner>
</puzzle>
<puzzle>
<ticket>444</ticket>
<file>src/test/java/com/jcabi/github/mock/MkContentsTest.java</file>
<prefix>     * </prefix>
<body>Methods create() in MkContents and json() in MkContent should be implemented in order for this test to work.</body>
<estimate>0</estimate>
<lines>155-156</lines>
<owner>someone</owner>
</puzzle>
</puzzles>
